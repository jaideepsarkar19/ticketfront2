/*!
 * Pepper
 * Copyright (c)2012 Pierre Matri <pierre.matri@coolony.com>
 * MIT Licensed
 */


/**
 * Module dependencies.
 */

var util = require('util');
var EventEmitter = require('events').EventEmitter;
var fs = require('fs');
var path = require('path');
var frame = require('frame');

var walker = require('./walker');
var tools = require('./tools');


/**
 * Constructs a Pepper instance.
 *
 * @param {Object} [options]
 * @api public
 */

function Pepper(options) {
  if(!options) options = {};
  if(typeof options.configDir === 'string') {
    options.configDir = [options.configDir];
  }
  if(typeof options.controllerDir === 'string') {
    options.controllerDir = [options.controllerDir];
  }
  this.options = options;
  this._debug('Pepper initialized.');
}
util.inherits(Pepper, EventEmitter);


/**
 * Loads configuration and controllers for `app`.
 *
 * @param {Application} app Application to configure.
 * @api public
 */

Pepper.prototype.bake = function(app) {
  var _this = this;

  function onConfigLoaded(err) {
    if(err) return _this._handleError(err);
    if(_this.options.controllerDir) {
      _this._loadControllers(app, onControllersLoaded);
    } else {
      _this.onControllersLoaded();
    }
  }

  function onControllersLoaded(err) {
    if(err) return _this._handleError(err);
    _this.emit('done');
  }

  if(_this.options.configDir) {
    this._loadConfig(app, onConfigLoaded);
  } else {
    this.onConfigLoaded();
  }
};


/**
 * Emit "error" and "done" events on error.
 *
 * @param {Error} err Error to return.
 * @api private
 */

Pepper.prototype._handleError = function(err) {
  this.emit('error', err)
      .emit('done', err);
};


/**
 * Log debug error messages, if required.
 *
 * @param {String} str Debug message.
 * @api private
 */

Pepper.prototype._debug = function(str) {
  if(this.options.debug !== true && !this.options.logger) return;
  if(this.options.logger) {
    this.options.logger.debug(str);
  } else {
    console.log(str);
  }
};


/**
 * Load configuration for `app`, and invoke `callback(err)`.
 *
 * @param {Application} app Application to configure.
 * @param {Function} callback Callback function.
 * @api private
 */

Pepper.prototype._loadConfig = function(app, callback) {
  this._debug('Loading configuration.');
  var _this = this;
  var acc = [];

  walker(this.options.configDir || [], this.options)
    .on('file', function(filePath, dir, next) {
      if(path.extname(filePath) === '.js') {
        acc.push({
          name: path.basename(filePath, '.js'),
          func: require(filePath),
          path: filePath
        });
      }
      next();
    })
    .on('error', function(err) {
      return callback(err);
    })
    .on('done', function() {
      _this._configureApp(app, acc, callback);
    });
};


/**
 * Apply `configItems` to `app`, and invoke `callback(err)`.
 *
 * @param {Application} app Application to configure.
 * @param {Array} configItems Configuration items.
 * @param {Function} callback Callback function.
 * @api private
 */

Pepper.prototype._configureApp = function(app, configItems, callback) {
  var _this = this;
  var configList = [];

  var configItemLength = configItems.length;
  for(var i = 0; i < configItemLength; i++) {
    var configItem = configItems[i];
    if(typeof configItem.func === 'function') {
      if(typeof configItem.func.priority === 'undefined') {
        configItem.priority = Infinity;
      } else {
        configItem.priority = configItem.func.priority;
      }
      configList.push(configItem);
    }
  }

  configList.sort(function sort(a, b) {
    return a.priority - b.priority;
  });

  function runOne(item, next) {
    _this._debug('Applying config "' + item.name + '".');
    _this.emit('runConfig', item.name, item.path, item.func);

    if(item.func.length <= 1) {
      try {
        item.func(app);
      } catch(err) {
        return next(err);
      }
      next();
    } else {
      item.func(app, next);
    }
  }

  frame.asyncForEach(configList, runOne, callback);
};


/**
 * Load controllers for `app`, and invoke `callback(err)`.
 *
 * @param {Application} app Application to configure.
 * @param {Function} callback Callback function.
 * @api private
 */

Pepper.prototype._loadControllers = function(app, callback) {
  this._debug('Loading controllers.');
  var _this = this;

  walker(this.options.controllerDir || [], this.options)
    .on('file', function(filePath, dir, next) {
      if(path.extname(filePath) === '.js') {
        _this._handleController(app, filePath);
      }
      next();
    })
    .on('error', function(err) {
      return callback(err);
    })
    .on('done', function() {
      return callback();
    });
};


/**
 * Register controller at `filePath` for `app`.
 *
 * @param {Application} app Application to configure.
 * @param {String} filePath Controller file path.
 * @api private
 */


Pepper.prototype._handleController = function(app, filePath) {
  var _this = this;

  var fileContents = require(filePath);
  for(var handlerName in fileContents) {
    var handler = fileContents[handlerName];
    if(!handler.url) continue;

    var url = this.options.prefix ?
                 [this.options.prefix, handler.url].join() :
                 handler.url;

    var methods = handler.methods;
    if(!methods || !methods.length) methods = ['GET'];
    if(typeof methods !== 'object') methods = [methods];

    var before;
    if(handler.before) {
      if(typeof handler.before === 'function') {
        before = [handler.before];
      } else {
        before = handler.before;
      }
    }

    methods.forEach(function(method) {
      var args = [url].concat(before || []);
      _this.emit('bindController', handler);
      app[method.toLowerCase()].apply(app, args.concat(handler));
      _this._debug([
        'Bound "', filePath, '#', handlerName, '"',
        ' to "', url, '" [', method, '].'
      ].join(''));
    });
  }
};


/**
 * Module exports.
 */

module.exports = Pepper;