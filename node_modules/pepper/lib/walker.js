/*!
 * Pepper
 * Copyright (c)2012 Pierre Matri <pierre.matri@coolony.com>
 * MIT Licensed
 */


/**
 * Module constants.
 */

var ESCAPE_CHARS_RE = /[.|\-\[\]()\\]/g;
var ASTERISK_RE = /\*/g;


/**
 * Module dependencies.
 */

var fs = require('fs');
var path = require('path');
var EventEmitter = require('events').EventEmitter;


/**
 * Recursively list files in `dirs`.
 *
 * @param {String|Array} dirs Directories to search in.
 * @param {Object} [options] Options.
 * @return {EventEmitter} Event emitter.
 * @api public
 */

function walk(dirs, options) {

  // Register variables
  options = options || {};
  options.ignore = options.ignore || [];
  var ignore;
  var emitter = new EventEmitter();
  dirs = typeof dirs === 'string' ? [dirs] : dirs;
  var queue = dirs.slice(0);
  var cur;
  var curBaseDir;

  // Main walker
  function doWalk() {
    cur = queue.pop();

    // Emit done if finished
    if(!cur) return emitter.emit('done');

    // If popped dir is base dir
    if(dirs.indexOf(cur) !== -1) { curBaseDir = cur; }

    // Stat file
    fs.lstat(cur, function (err, stats) {
      var events = [];
      var callback;

      if(err) return emit('error', err);

      // Handle symbolic links
      var isSymLink = stats.isSymbolicLink();
      if(isSymLink && options.followSymLinks === false) { return doWalk(); }
      if(isSymLink) events.push('symLink');

      // Handle directories
      if(stats.isDirectory()) {
        events.push('dir');
        callback = expandDir;
      }

      // Handle files
      if(stats.isFile()) {
        events.push('file');
      }

      emit(events, callback);
    });
  }

  // Directory expander
  function expandDir(yes) {
    if(yes === false) { return doWalk(); }
    fs.readdir(cur, function (err, files) {
      files.forEach(function (file) {

        // Exclude hidden files, if required
        if(file[0] === '.' && options.ignoreHiddenElements !== false) return;

        // Get absolute path
        var absolute = path.join(cur, file);

        // Exclude ignored files
        if(ignore && absolute.match(ignore)) return;

        // Push file to queue
        queue.push(absolute);
      });

      doWalk();
    });
  }

  // Emit event
  function emit(events, callback) {
    var listeners = 0;
    var result = true;

    // Set default callback
    callback = callback || function () {
      doWalk();
    };

    // Emit callback function
    function emitCallback(yes) {
      result = result && yes !== false;
      listeners--;
      if(listeners === 0) callback(result);
    }

    // Account for listeners
    events.forEach(function (event) {
      listeners += emitter.listeners(event).length;
    });

    // Return if no listener
    if(listeners === 0) callback(result);

    // Actually emit events
    events.forEach(function (event) {
      emitter.emit(event, cur, curBaseDir, emitCallback);
    });
  }

  // Regexify ignore
  options.ignore = options.ignore.map(function (pattern) {
    return pattern.replace(ESCAPE_CHARS_RE, '\\$&')
                  .replace(ASTERISK_RE, '.*');
  });
  var combinedPattern = options.ignore.join('|');
  if(combinedPattern) {
    ignore = new RegExp('^(' + combinedPattern + ')$', 'g');
  }

  // Start working
  doWalk();

  // Return emitter
  return emitter;
}


/**
 * Module exports.
 */

module.exports = walk;